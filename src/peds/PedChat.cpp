#include "common.h"
#include "Camera.h"
#include "DMAudio.h"
#include "General.h"
#include "Ped.h"

const char *sound_names[] = {
	"SOUND_CAR_DOOR_CLOSE_BONNET",
	"SOUND_CAR_DOOR_CLOSE_BUMPER",
	"SOUND_CAR_DOOR_CLOSE_FRONT_LEFT",
	"SOUND_CAR_DOOR_CLOSE_FRONT_RIGHT",
	"SOUND_CAR_DOOR_CLOSE_BACK_LEFT",
	"SOUND_CAR_DOOR_CLOSE_BACK_RIGHT",
	"SOUND_CAR_DOOR_OPEN_BONNET",
	"SOUND_CAR_DOOR_OPEN_BUMPER",
	"SOUND_CAR_DOOR_OPEN_FRONT_LEFT",
	"SOUND_CAR_DOOR_OPEN_FRONT_RIGHT",
	"SOUND_CAR_DOOR_OPEN_BACK_LEFT",
	"SOUND_CAR_DOOR_OPEN_BACK_RIGHT",
	"SOUND_CAR_WINDSHIELD_CRACK",
	"SOUND_CAR_JUMP",
	"SOUND_CAR_JUMP_2",
	"SOUND_CAR_TYRE_POP",
	"SOUND_16",
	"SOUND_17",
	"SOUND_CAR_ENGINE_START",
	"SOUND_CAR_LIGHT_BREAK",
	"SOUND_CAR_HYDRAULIC_1",
	"SOUND_CAR_HYDRAULIC_2",
	"SOUND_CAR_HYDRAULIC_3",
	"SOUND_CAR_JERK",
	"SOUND_CAR_SPLASH",
	"SOUND_BOAT_SLOWDOWN",
	"SOUND_TRAIN_DOOR_CLOSE",
	"SOUND_TRAIN_DOOR_OPEN",
	"SOUND_CAR_TANK_TURRET_ROTATE",
	"SOUND_CAR_BOMB_TICK",
	"SOUND_PLANE_ON_GROUND",
	"SOUND_HELI_BLADE",
	"SOUND_32",
	"SOUND_STEP_START",
	"SOUND_STEP_END",
	"SOUND_FALL_LAND",
	"SOUND_FALL_COLLAPSE",
	"SOUND_FIGHT_37",
	"SOUND_FIGHT_38",
	"SOUND_FIGHT_39",
	"SOUND_FIGHT_40",
	"SOUND_FIGHT_41",
	"SOUND_FIGHT_42",
	"SOUND_FIGHT_43",
	"SOUND_FIGHT_44",
	"SOUND_FIGHT_45",
	"SOUND_FIGHT_46",
	"SOUND_FIGHT_47",
	"SOUND_FIGHT_48",
	"SOUND_49",
	"SOUND_WEAPON_BAT_ATTACK",
	"SOUND_WEAPON_KNIFE_ATTACK",
	"SOUND_WEAPON_CHAINSAW_IDLE",
	"SOUND_WEAPON_CHAINSAW_ATTACK",
	"SOUND_WEAPON_CHAINSAW_MADECONTACT",
	"SOUND_WEAPON_SHOT_FIRED",
	"SOUND_WEAPON_RELOAD",
	"SOUND_WEAPON_AK47_BULLET_ECHO",
	"SOUND_WEAPON_FLAMETHROWER_FIRE",
	"SOUND_WEAPON_SNIPER_SHOT_NO_ZOOM",
	"SOUND_WEAPON_ROCKET_SHOT_NO_ZOOM",
	"SOUND_WEAPON_HIT_PED",
	"SOUND_WEAPON_HIT_VEHICLE",
	"SOUND_GARAGE_NO_MONEY",
	"SOUND_GARAGE_BAD_VEHICLE",
	"SOUND_GARAGE_OPENING",
	"SOUND_GARAGE_BOMB_ALREADY_SET",
	"SOUND_GARAGE_BOMB1_SET",
	"SOUND_GARAGE_BOMB2_SET",
	"SOUND_GARAGE_BOMB3_SET",
	"SOUND_70",
	"SOUND_71",
	"SOUND_GARAGE_VEHICLE_DECLINED",
	"SOUND_GARAGE_VEHICLE_ACCEPTED",
	"SOUND_GARAGE_DOOR_CLOSED",
	"SOUND_GARAGE_DOOR_OPENED",
	"SOUND_CRANE_PICKUP",
	"SOUND_PICKUP_WEAPON_BOUGHT",
	"SOUND_PICKUP_WEAPON",
	"SOUND_PICKUP_HEALTH",
	"SOUND_80",
	"SOUND_81",
	"SOUND_PICKUP_ADRENALINE",
	"SOUND_PICKUP_ARMOUR",
	"SOUND_PICKUP_BONUS",
	"SOUND_PICKUP_MONEY",
	"SOUND_PICKUP_HIDDEN_PACKAGE",
	"SOUND_PICKUP_PACMAN_PILL",
	"SOUND_PICKUP_PACMAN_PACKAGE",
	"SOUND_PICKUP_FLOAT_PACKAGE",
	"SOUND_BOMB_TIMED_ACTIVATED",
	"SOUND_91",
	"SOUND_BOMB_ONIGNITION_ACTIVATED",
	"SOUND_BOMB_TICK",
	"SOUND_RAMPAGE_START",
	"SOUND_RAMPAGE_ONGOING",
	"SOUND_RAMPAGE_PASSED",
	"SOUND_RAMPAGE_FAILED",
	"SOUND_RAMPAGE_KILL",
	"SOUND_RAMPAGE_CAR_BLOWN",
	"SOUND_EVIDENCE_PICKUP",
	"SOUND_UNLOAD_GOLD",
	"SOUND_PAGER",
	"SOUND_PED_DEATH",
	"SOUND_PED_DAMAGE",
	"SOUND_PED_HIT",
	"SOUND_PED_LAND",
	"SOUND_PED_BULLET_HIT",
	"SOUND_PED_BURNING",
	"SOUND_PED_PLAYER_REACTTOCOP",
	"SOUND_PED_ARREST_COP",
	"SOUND_PED_MIAMIVICE_EXITING_CAR",
	"SOUND_PED_COP_HELIPILOTPHRASE",
	"SOUND_PED_PULLOUTWEAPON",
	"SOUND_PED_HELI_PLAYER_FOUND",
	"SOUND_PED_VCPA_PLAYER_FOUND",
	"SOUND_PED_ON_FIRE",
	"SOUND_PED_AIMING",
	"SOUND_PED_HANDS_UP",
	"SOUND_PED_HANDS_COWER",
	"SOUND_PED_FLEE_SPRINT",
	"SOUND_PED_CAR_JACKING",
	"SOUND_PED_MUGGING",
	"SOUND_PED_CAR_JACKED",
	"SOUND_PED_ROBBED",
	"SOUND_PED_ACCIDENTREACTION1",
	"SOUND_PED_INNOCENT",
	"SOUND_PED_PLAYER_AFTERSEX",
	"SOUND_PED_PLAYER_BEFORESEX",
	"SOUND_PED_COP_TARGETING",
	"SOUND_PED_COP_MANYCOPSAROUND",
	"SOUND_PED_GUNAIMEDAT2",
	"SOUND_PED_COP_ALONE",
	"SOUND_PED_GUNAIMEDAT3",
	"SOUND_PED_COP_ASK_FOR_ID",
	"SOUND_PED_COP_LITTLECOPSAROUND",
	"SOUND_PED_PLAYER_FARFROMCOPS",
	"SOUND_PED_TAXI_WAIT",
	"SOUND_PED_ATTACK",
	"SOUND_PED_DEFEND",
	"SOUND_PED_HEALING",
	"SOUND_PED_LEAVE_VEHICLE",
	"SOUND_PED_EVADE",
	"SOUND_PED_FLEE_RUN",
	"SOUND_PED_CRASH_VEHICLE",
	"SOUND_PED_CRASH_CAR",
	"SOUND_PED_ANNOYED_DRIVER",
	"SOUND_PED_147",
	"SOUND_PED_SOLICIT",
	"SOUND_PED_JEER",
	"SOUND_PED_150",
	"SOUND_PED_EXTINGUISHING_FIRE",
	"SOUND_PED_WAIT_DOUBLEBACK",
	"SOUND_PED_CHAT_SEXY_FEMALE",
	"SOUND_PED_CHAT_SEXY_MALE",
	"SOUND_PED_CHAT_EVENT",
	"SOUND_PED_PED_COLLISION",
	"SOUND_PED_CHAT",
	"SOUND_PED_TAXI_CALL",
	"SOUND_RACE_START_3",
	"SOUND_RACE_START_2",
	"SOUND_RACE_START_1",
	"SOUND_RACE_START_GO",
	"SOUND_SPLASH",
	"SOUND_WATER_FALL",
	"SOUND_SPLATTER",
	"SOUND_CAR_PED_COLLISION",
	"SOUND_CLOCK_TICK",
	"SOUND_PART_MISSION_COMPLETE",
	"SOUND_FRONTEND_MENU_STARTING",
	"SOUND_FRONTEND_RADIO_TURN_ON",
	"SOUND_FRONTEND_HURRICANE",
	"SOUND_HUD",
	"SOUND_180",
	"SOUND_181",
	"SOUND_182",
	"SOUND_LIGHTNING",
	"SOUND_BULLETTRACE_1",
	"SOUND_BULLETTRACE_2",
	"SOUND_186",
	"SOUND_187",
	"SOUND_MELEE_ATTACK_START",
	"SOUND_SKATING",
	"SOUND_WEAPON_MINIGUN_ATTACK",
	"SOUND_WEAPON_MINIGUN_2",
	"SOUND_WEAPON_MINIGUN_3",
	"SOUND_AMMUNATION_IMRAN_ARM_BOMB",
	"SOUND_RADIO_CHANGE",
	"SOUND_FRONTEND_HIGHLIGHT_OPTION",
	"SOUND_FRONTEND_ENTER_OR_ADJUST",
	"SOUND_FRONTEND_BACK",
	"SOUND_FRONTEND_FAIL",
	"SOUND_FRONTEND_AUDIO_TEST",
	"SOUND_INJURED_PED_MALE_OUCH",
	"SOUND_INJURED_PED_FEMALE",
	"SOUND_SHIRT_WIND_FLAP",
	"SOUND_SET_203",
	"SOUND_TOTAL_SOUNDS",
	"SOUND_NO_SOUND"
};

// Corresponds to ped sounds (from SOUND_PED_DEATH to SOUND_PED_TAXI_CALL)
PedAudioData CommentWaitTime[56] = {
  { 500, 800, 500, 2 },
  { 500, 800, 500, 2 },
  { 500, 800, 500, 2 },
  { 500, 800, 500, 2 },
  { 100, 2, 100, 2 },
  { 500, 500, 2000, 1000 },
  { 2000, 50, 2050, 1000 },
  { 5000, 2000, 7000, 3000 },
  { 5000, 2000, 7000, 3000 },
  { 300, 200, 500, 200 },
  { 3000, 1000, 4000, 1000 },
  { 6000, 6000, 6000, 6000 },
  { 4000, 1000, 5000, 1000 },
  { 3000, 1000, 4000, 1000 },
  { 1000, 1000, 2000, 2000 },
  { 1000, 500, 2000, 1500 },
  { 1700, 1000, 3000, 1000 },
  { 800, 200, 1000, 500 },
  { 800, 200, 1000, 500 },
  { 800, 400, 2000, 1000 },
  { 800, 400, 2000, 1000 },
  { 2000, 2000, 4000, 4000 },
  { 2000, 2000, 4000, 1000 },
  { 4000, 1000, 5000, 1000 },
  { 800, 400, 1200, 500 },
  { 5000, 1000, 6000, 2000 },
  { 5000, 1000, 6000, 2000 },
  { 5000, 1000, 6000, 2000 },
  { 5000, 1000, 6000, 2000 },
  { 5000, 1000, 6000, 2000 },
  { 5000, 1000, 6000, 2000 },
  { 5000, 1000, 6000, 2000 },
  { 4000, 2000, 7000, 2000 },
  { 1000, 300, 2000, 1000 },
  { 1500, 1000, 2500, 1000 },
  { 200, 200, 200, 200 },
  { 2000, 1000, 4000, 1000 },
  { 2000, 1000, 4000, 1000 },
  { 1000, 500, 3000, 1000 },
  { 1000, 500, 1000, 1000 },
  { 3000, 2000, 5000, 1000 },
  { 3000, 2000, 5000, 1000 },
  { 3000, 2000, 3000, 2000 },
  { 2000, 1000, 3000, 1000 },
  { 2500, 1000, 5000, 5000 },
  { 2000, 1000, 3000, 2000 },
  { 4000, 1000, 5000, 1000 },
  { 1000, 500, 2000, 4000 },
  { 1000, 500, 2000, 5000 },
  { 2000, 500, 2500, 500 },
  { 1000, 500, 3000, 2000 },
  { 1600, 1000, 2000, 2000 },
  { 2000, 1000, 4000, 2000 },
  { 1500, 1000, 2500, 1000 },
  { 1000, 1000, 5000, 5000 },
  { 0, 0, 0, 0 }
};

bool
CPed::ServiceTalkingWhenDead(void)
{
	return m_queuedSound == SOUND_PED_DEATH;
}

void
CPed::ServiceTalking(void)
{
	if (bBodyPartJustCameOff && m_bodyPartBleeding == PED_HEAD)
		return;

	if (!CGame::germanGame && m_pFire)
		m_queuedSound = SOUND_PED_BURNING;

	if (m_queuedSound != SOUND_NO_SOUND) {
		if (m_queuedSound == SOUND_PED_DEATH)
			m_soundStart = CTimer::GetTimeInMilliseconds() - 1;

		if (CTimer::GetTimeInMilliseconds() > m_soundStart) {
			DMAudio.PlayOneShot(m_audioEntityId, m_queuedSound, 1.0f);
			m_lastSoundStart = CTimer::GetTimeInMilliseconds();
			m_soundStart =
				CommentWaitTime[m_queuedSound - SOUND_PED_DEATH].m_nFixedDelayTime
				+ CTimer::GetTimeInMilliseconds()
				+ CGeneral::GetRandomNumberInRange(0, CommentWaitTime[m_queuedSound - SOUND_PED_DEATH].m_nOverrideFixedDelayTime);

			if (m_queuedSound == SOUND_PED_PLAYER_BEFORESEX && IsPlayer())
				m_soundStart += 2000;

			m_lastQueuedSound = m_queuedSound;
			m_queuedSound = SOUND_NO_SOUND;
		}
	}
}

void
CPed::Say(uint16 audio)
{
	if (audio != SOUND_PED_CHAT) {
		debug("Say %d: %s\n", audio, sound_names[audio]);
	}

	if (3.0f + TheCamera.GetPosition().z < GetPosition().z)
		return;

	if (TheCamera.m_CameraAverageSpeed > 1.65f) {
		if (audio != SOUND_PED_DAMAGE && audio != SOUND_PED_HIT && audio != SOUND_PED_LAND)
			return;

	} else if (TheCamera.m_CameraAverageSpeed > 1.25f) {
		if (audio != SOUND_PED_DEATH &&
			audio != SOUND_PED_DAMAGE && audio != SOUND_PED_HIT && audio != SOUND_PED_LAND &&
			audio != SOUND_PED_TAXI_WAIT && audio != SOUND_PED_EVADE)
			return;

	} else if (TheCamera.m_CameraAverageSpeed > 0.9f) {
		switch (audio) {
			case SOUND_PED_DEATH:
			case SOUND_PED_DAMAGE:
			case SOUND_PED_HIT:
			case SOUND_PED_LAND:
			case SOUND_PED_BURNING:
			case SOUND_PED_FLEE_SPRINT:
			case SOUND_PED_TAXI_WAIT:
			case SOUND_PED_EVADE:
			case SOUND_PED_CRASH_VEHICLE:
			case SOUND_PED_CRASH_CAR:
			case SOUND_PED_ANNOYED_DRIVER:
				break;
			default:
				return;
		}
	}

	if (audio < m_queuedSound) {
		if (audio != m_lastQueuedSound || audio == SOUND_PED_DEATH

		// See VC Ped Speech patch
#ifdef FIX_BUGS
			|| CommentWaitTime[audio - SOUND_PED_DEATH].m_nOverrideMaxRandomDelayTime
				+ (uint32)CGeneral::GetRandomNumberInRange(0, CommentWaitTime[audio - SOUND_PED_DEATH].m_nMaxRandomDelayTime)
#else
			|| CommentWaitTime[m_queuedSound - SOUND_PED_DEATH].m_nOverrideMaxRandomDelayTime
			+ (uint32)CGeneral::GetRandomNumberInRange(0, CommentWaitTime[m_queuedSound - SOUND_PED_DEATH].m_nMaxRandomDelayTime)
#endif
				+ m_lastSoundStart <= CTimer::GetTimeInMilliseconds()) {
			m_queuedSound = audio;
		}
	}
}